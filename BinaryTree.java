/**   A class that implements the BinaryTreeInterface.      @author    @version 1.0*/public class BinaryTree<T> implements BinaryTreeInterface<T>{   protected BinaryNode<T> root;   public BinaryTree()   {      root = null;   } // end default constructor   public BinaryTree(T rootData)   {      root = new BinaryNode<>(rootData);   } // end constructor   public BinaryTree(T rootData, BinaryTree<T> leftTree,                                  BinaryTree<T> rightTree)   {      privateSetTree(rootData, leftTree, rightTree);   } // end constructor   public void setTree(T rootData)   {      root = new BinaryNode<>(rootData);   } // end setTree   public void setTree(T rootData, BinaryTreeInterface<T> leftTree,                                   BinaryTreeInterface<T> rightTree)   {      privateSetTree(rootData, (BinaryTree<T>)leftTree,                                (BinaryTree<T>)rightTree);   } // end setTree	private void privateSetTree(T rootData, BinaryTree<T> leftTree, 	                                        BinaryTree<T> rightTree)	{      root = new BinaryNode<>(rootData);      if ((leftTree != null) && !leftTree.isEmpty())         root.setLeftChild(leftTree.root);             if ((rightTree != null) && !rightTree.isEmpty())      {         if (rightTree != leftTree)            root.setRightChild(rightTree.root);         else            root.setRightChild(rightTree.root.copy());      } // end if      if ((leftTree != null) && (leftTree != this))         leftTree.clear();              if ((rightTree != null) && (rightTree != this))         rightTree.clear();	} // end privateSetTree	public T getRootData()	{		if (isEmpty())			throw new EmptyTreeException();		else         return root.getData();	} // end getRootData	public boolean isEmpty()	{      return root == null;	} // end isEmpty	public void clear()	{      root = null;	} // end clear	protected void setRootData(T rootData)	{      root.setData(rootData);	} // end setRootData	public void setRootNode(BinaryNode<T> rootNode)	{      root = rootNode;	} // end setRootNode	public BinaryNode<T> getRootNode()	{      return root;	} // end getRootNode	public int getHeight()	{		if (root == null)			throw new NullPointerException();		else            return root.getHeight();	} // end getHeight	public int getNumberOfNodes()	{		if (root == null)			throw new NullPointerException();		else           return root.getNumberOfNodes();	} // end getNumberOfNodes		} // end BinaryTree